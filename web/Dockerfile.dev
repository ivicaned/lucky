FROM php:7.4-fpm-alpine


RUN apk add --no-cache --virtual .build-deps \
  $PHPIZE_DEPS \
  curl-dev \
  imagemagick-dev \
  libtool \
  libxml2-dev \
  postgresql-dev \
  sqlite-dev

# Install production dependencies
RUN apk add --no-cache \
  bash \
  curl \
  freetype-dev \
  g++ \
  gcc \
  git \
  icu-dev \
  icu-libs \
  imagemagick \
  libc-dev \
  libjpeg-turbo-dev \
  libpng-dev \
  libzip-dev \
  make \
  mysql-client \
  nodejs \
  nodejs-npm \
  oniguruma-dev \
  yarn \
  openssh-client \
  postgresql-libs \
  rsync \
  zlib-dev

# Install PECL and PEAR extensions
RUN pecl install \
  redis \
  imagick \
  xdebug

# Enable PECL and PEAR extensions
RUN docker-php-ext-enable \
  redis \
  imagick \
  xdebug

# Configure php extensions
RUN docker-php-ext-configure gd --with-freetype --with-jpeg

# Install php extensions
RUN docker-php-ext-install \
  bcmath \
  calendar \
  curl \
  exif \
  gd \
  iconv \
  intl \
  mbstring \
  pdo \
  pdo_mysql \
  pdo_pgsql \
  pdo_sqlite \
  pcntl \
  tokenizer \
  xml \
  zip

# Install composer
ENV COMPOSER_HOME /composer
ENV PATH ./vendor/bin:/composer/vendor/bin:$PATH
ENV COMPOSER_ALLOW_SUPERUSER 1
RUN curl -s https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin/ --filename=composer

# Install PHP_CodeSniffer
RUN composer global require "squizlabs/php_codesniffer=*"

# Cleanup dev dependencies
RUN apk del -f .build-deps

# Install packages and remove default server definition
RUN apk --no-cache add nginx supervisor curl && \
  rm /etc/nginx/conf.d/default.conf

# Configure nginx
COPY ./config/nginx.conf /etc/nginx/nginx.conf

# Configure PHP-FPM
COPY ./config/fpm-pool.conf /etc/php7/php-fpm.d/www.conf
COPY ./config/php.ini /etc/php7/conf.d/custom.ini

# Configure supervisord
COPY ./config/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
RUN mkdir -p /var/www/html

# ToDo: Do not use this on production
RUN apk --no-cache add shadow && usermod --non-unique --uid 1000 www-data \
  && groupmod --non-unique --gid 1000 www-data

# Make sure files/folders needed by the processes are accessable when they run under the nobody user
RUN chown -R www-data.www-data /var/www/html && \
  chown -R www-data.www-data /run && \
  chown -R www-data.www-data /var/lib/nginx && \
  chown -R www-data.www-data /var/log/nginx

USER www-data
#RUN usermod -u 1000 www-data


# Add application
WORKDIR /var/www/html

# Expose the port nginx is reachable on
EXPOSE 8082

# Let supervisord start nginx & php-fpm
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]

# Configure a healthcheck to validate that everything is up&running
HEALTHCHECK --interval=5s --timeout=3s \
  CMD curl -f http://localhost/ping || exit 1

# Setup working directory
WORKDIR /var/www/html